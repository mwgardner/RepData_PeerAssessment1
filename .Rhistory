library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data=airquality)
View(airquality)
xyplot(Ozone ~ Wind | Month, data=airquality)
airquality <- transform(airquality, Month=factor(Month))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1,each=50)
y <- x + f - f * x + rnorm(100, sd=0.5)
f <- factor(f, labels=c("Group 1","Group 2"))
xyplot(y ~ x | f, layout=c(2,1))
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.abline(h=median(y),lty=2)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(h=median(y),col=2)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x,y,col=2)
})
library(ggplot2)
library(grid)
library(data.table)
library(dplyr)
library(reshape2)
ddply
ddply()
?ddply
library(dplyr)
ddply()
install.packages("kernlab")
library(knitr)
install.packages("knitr")
install.packages("slidify")
library(knitr)
opts_chunk$set(warning=FALSE)
setwd("F:/Documents/Education/Coursera_DataScience/RepData_PeerAssessment1")
library(lubridate)
unzip("./activity.zip",overwrite=TRUE)
activity <- read.csv("./activity.csv",header=TRUE,na.strings="NA",stringsAsFactors=FALSE,colClasses=c("numeric","character","numeric"))
activity$dateFactor <- as.factor(activity$date)
activity$date <- ymd(activity$date)
library(ggplot2)
activeDays <- activity[!is.na(activity$steps),]
totalSteps <- tapply(activeDays$steps,activeDays$dateFactor,sum)
totalSteps <- as.data.frame(totalSteps)
totalSteps$date <- as.factor(row.names(totalSteps))
names(totalSteps) <- c("totSteps","date")
stepHisto <- ggplot(totalSteps,aes(x=totSteps)) + geom_histogram(binwidth=1000,color="black",fill="dodgerblue4") + labs(x="Total Steps Taken Per Day",y="Frequency")
print(stepHisto)
meanTotSteps <- mean(totalSteps$totSteps,na.rm=TRUE)
meanTotSteps
medianTotSteps <- median(totalSteps$totSteps,na.rm=TRUE)
medianTotSteps
activeDays$intFactor <- factor(activeDays$interval)
meanStepPattern <- as.data.frame(tapply(activeDays$steps,activeDays$intFactor,mean))
meanStepPattern$interval <- as.numeric(row.names(meanStepPattern))
names(meanStepPattern) <- c("meanSteps","interval")
maxInt <- meanStepPattern$interval[which.max(meanStepPattern$meanSteps)]
pattern <- ggplot(meanStepPattern,aes(x=interval,y=meanSteps)) + geom_line(color="dodgerblue4") + labs(x="Time Interval",y="Mean Steps",title="Mean Steps Taken as a Function of Time of Day")
print(pattern)
maxInt
sum(is.na(activity$steps))
idxNA <- is.na(activity$steps)
numNA <- sum(is.na(activity$steps))
View(meanStepPattern)
tmp <- round(meanStepPattern)
View(tmp)
idxNA <- which(is.na(activity$steps))
View(idxNA)
View(activity)
class(meanStepPattern$interval)
meanStepPattern$meanStepsRound <- round(meanStepPattern$meanSteps)
View(meanStepPattern)
numNA <- sum(is.na(activity$steps))
idxNA <- which(is.na(activity$steps))
activity.full <- activity
meanStepPattern$meanStepsRound <- round(meanStepPattern$meanSteps)
for (i in 1:length(idxNA)) {
# rowIdx <- idxNA[i]
# intervalTmp <- activity.full$interval[rowIdx]
activity.full$steps[idxNA[i]] <- meanStepPattern$meanStepsRound[meanStepPattern$interval==activity.full$interval[idxNA[i]]]
}
View(activity.full)
sum(is.na(activity.full$steps))
numNA <- sum(is.na(activity$steps))
idxNA <- which(is.na(activity$steps))
activity.fill <- activity
meanStepPattern$meanStepsRound <- round(meanStepPattern$meanSteps)
for (i in 1:length(idxNA)) {
activity.fill$steps[idxNA[i]] <- meanStepPattern$meanStepsRound[meanStepPattern$interval==activity.fill$interval[idxNA[i]]]
}
totalStepsFill <- tapply(activity.fill$steps,activity.fill$dateFactor,sum)
totalStepsFill <- as.data.frame(totalStepsFill)
totalStepsFill$date <- as.factor(row.names(totalStepsFill))
names(totalStepsFill) <- c("totSteps","date")
stepHisto2 <- ggplot(totalStepsFill,aes(x=totSteps)) + geom_histogram(binwidth=1000,color="black",fill="dodgerblue4") + labs(x="Total Steps Taken Per Day",y="Frequency")
print(stepHisto2)
meanTotStepsFill <- mean(totalStepsFill$totSteps,na.rm=TRUE)
meanTotStepsFill
medianTotStepsFill <- median(totalStepsFill$totSteps,na.rm=TRUE)
medianTotStepsFill
?max
hist(totalStepsFill$totSteps,plot=FALSE)
?hist
hist(totalStepsFill$totSteps,plot=FALSE, breaks=1000)
hist(totalStepsFill$totSteps,plot=FALSE, breaks=25)
hist(totalStepsFill$totSteps,plot=TRUE, breaks=25)
stepHistoData <- hist(totalSteps$totSteps,plot=FALSE,breaks=25)
stepHistoData2 <- hist(totalStepsFill$totSteps,plot=FALSE,breaks=25)
stepHistoData
stepHistoData2
maxFreq <- which(max(stepHistoData$counts))
maxFreq <- which.max(stepHistoData$counts)
maxFreq
maxFreq <- which.max(stepHistoData2$counts)
maxFreq
stepHistoData <- hist(totalSteps$totSteps,plot=FALSE,breaks=25)
maxFreqIdx <- which.max(stepHistoData$counts)
maxFreq <- stepHistoData$counts[maxFreqIdx]
maxLowRange <- stepHistoData$breaks[maxFreqIdx]
maxHighRange <- stepHistoData$breaks[maxFreqIdx+1]
stepHistoData2 <- hist(totalStepsFill$totSteps,plot=FALSE,breaks=25)
maxFreqIdx2 <- which.max(stepHistoData2$counts)
maxFreq2 <- stepHistoData2$counts[maxFreqIdx2]
maxLowRange2 <- stepHistoData2$breaks[maxFreqIdx2]
maxHighRange2 <- stepHistoData2$breaks[maxFreqIdx2+1]
maxFreq
maxFreq2
x <- 10000
paste(x)
?weekdays
rm(activity.fill)
View(activity.fill)
library(knitr)
opts_chunk$set(warning=FALSE)
setwd("F:/Documents/Education/Coursera_DataScience/RepData_PeerAssessment1")
library(lubridate)
unzip("./activity.zip",overwrite=TRUE)
activity <- read.csv("./activity.csv",header=TRUE,na.strings="NA",stringsAsFactors=FALSE,colClasses=c("numeric","character","numeric"))
activity$dateFactor <- as.factor(activity$date)
activity$date <- ymd(activity$date)
library(ggplot2)
activeDays <- activity[!is.na(activity$steps),]
totalSteps <- tapply(activeDays$steps,activeDays$dateFactor,sum)
totalSteps <- as.data.frame(totalSteps)
totalSteps$date <- as.factor(row.names(totalSteps))
names(totalSteps) <- c("totSteps","date")
stepHisto <- ggplot(totalSteps,aes(x=totSteps)) + geom_histogram(binwidth=1000,color="black",fill="dodgerblue4") + labs(x="Total Steps Taken Per Day",y="Frequency")
print(stepHisto)
meanTotSteps <- mean(totalSteps$totSteps,na.rm=TRUE)
meanTotSteps
medianTotSteps <- median(totalSteps$totSteps,na.rm=TRUE)
medianTotSteps
activeDays$intFactor <- factor(activeDays$interval)
meanStepPattern <- as.data.frame(tapply(activeDays$steps,activeDays$intFactor,mean))
meanStepPattern$interval <- as.numeric(row.names(meanStepPattern))
names(meanStepPattern) <- c("meanSteps","interval")
maxInt <- meanStepPattern$interval[which.max(meanStepPattern$meanSteps)]
pattern <- ggplot(meanStepPattern,aes(x=interval,y=meanSteps)) + geom_line(color="dodgerblue4") + labs(x="Time Interval",y="Mean Steps",title="Mean Steps Taken as a Function of Time of Day")
print(pattern)
maxInt
numNA <- sum(is.na(activity$steps))
numNA
daysNA <- numNA/8
idxNA <- which(is.na(activity$steps))
activity.fill <- activity
meanStepPattern$meanStepsRound <- round(meanStepPattern$meanSteps)
for (i in 1:length(idxNA)) {
activity.fill$steps[idxNA[i]] <- meanStepPattern$meanStepsRound[meanStepPattern$interval==activity.fill$interval[idxNA[i]]]
}
totalStepsFill <- tapply(activity.fill$steps,activity.fill$dateFactor,sum)
totalStepsFill <- as.data.frame(totalStepsFill)
totalStepsFill$date <- as.factor(row.names(totalStepsFill))
names(totalStepsFill) <- c("totSteps","date")
stepHisto2 <- ggplot(totalStepsFill,aes(x=totSteps)) + geom_histogram(binwidth=1000,color="black",fill="dodgerblue4") + labs(x="Total Steps Taken Per Day (Filled in Data)",y="Frequency")
print(stepHisto2)
stepHistoData <- hist(totalSteps$totSteps,plot=FALSE,breaks=25)
maxFreqIdx <- which.max(stepHistoData$counts)
maxFreq <- stepHistoData$counts[maxFreqIdx]
maxLowRange <- stepHistoData$breaks[maxFreqIdx]
maxHighRange <- stepHistoData$breaks[maxFreqIdx+1]
stepHistoData2 <- hist(totalStepsFill$totSteps,plot=FALSE,breaks=25)
maxFreqIdx2 <- which.max(stepHistoData2$counts)
maxFreq2 <- stepHistoData2$counts[maxFreqIdx2]
maxLowRange2 <- stepHistoData2$breaks[maxFreqIdx2]
maxHighRange2 <- stepHistoData2$breaks[maxFreqIdx2+1]
totStepImpact <- "The inputting of rounded mean values for missing (NA) values "
if ((maxLowRange2 == maxLowRange) & (maxHighRange2 == maxHighRange)) {
totStepImpact <- paste0(totStepImpact,"did not impact the most frequent total number of steps per day, ranging from ",maxLowRange," to ",maxHighRange,". ")
} else {
totStepImpact <- paste0(totStepImpact,"impacted the most frequent total number of steps per day, originally from ",maxLowRange,"-",maxHighRange," to ",maxLowRange2,"-",maxHighRange2,". ")
}
if (maxFreq2 == maxFreq) {
totStepImpact <- paste0(totStepImpact,"The inputting of rounded mean values for missing (NA) values did not impact the maximum frequency (count) of total number of steps per day.")
} else {
totStepImpact <- paste0(totStepImpact,"The inputting of rounded mean values for missing (NA) values changed the maximum frequency (count) of total number of steps per day from ",maxFreq," to ",maxFreq2,".\n")
}
meanTotStepsFill <- mean(totalStepsFill$totSteps,na.rm=TRUE)
meanTotStepsFill
medianTotStepsFill <- median(totalStepsFill$totSteps,na.rm=TRUE)
medianTotStepsFill
View(activity.fill)
class(activity.fill$date)
tmp <- weekdays(activity.fill$date)
View(tmp)
dayType <- factor(rep(NA,nrow(activity.fill)),levels=c("weekday","weekend"))
activity.fill$dayOfWeek <- weekdays(activity.fill$date)
activity.fill$dayType <- factor(rep(NA,nrow(activity.fill)),levels=c("weekday","weekend"))
activity.fill$dayType[activity.fill %in% c("Saturday","Sunday")] <- "weekend"
activity.fill$dayType[is.na(activity.fill$dayType)] <- "weekday"
View(activity.fill)
activity.fill$intFactor <- factor(activity.fill$interval)
meanStepPattern2 <- as.data.frame(tapply(activity.fill$steps,activity.fill$intFactor,mean))
meanStepPattern2$interval <- as.numeric(row.names(meanStepPattern2))
View(meanStepPattern2)
pattern2 <- ggplot(activity.fill,aes(x=interval,y=steps)) + stat_summary(fun.y=mean,geom="line")
print(pattern2)
pattern2 <- ggplot(activity.fill,aes(x=interval,y=steps, color=dayType)) + stat_summary(fun.y=mean,geom="line")
print(pattern2)
pattern2 <- ggplot(activity.fill,aes(x=interval,y=steps)) + stat_summary(fun.y=mean,geom="line") + facet_wrap(~dayType)
print(pattern2)
View(activity.fill[1001:2000,])
activity.fill$dayOfWeek <- weekdays(activity.fill$date)
activity.fill$dayType <- factor(rep(NA,nrow(activity.fill)),levels=c("weekday","weekend"))
View(activity.fill[1001:2000,])
activity.fill$dayType[activity.fill$dayOfWeek %in% c("Saturday","Sunday")] <- "weekend"
View(activity.fill[1001:2000,])
activity.fill$dayType[is.na(activity.fill$dayType)] <- "weekday"
pattern2 <- ggplot(activity.fill,aes(x=interval,y=steps, color=dayType)) + stat_summary(fun.y=mean,geom="line") + facet_wrap(~dayType)
print(pattern2)
pattern2 <- ggplot(activity.fill,aes(x=interval,y=steps, color=dayType)) + stat_summary(fun.y=mean,geom="line") + facet_wrap(dayType~)
pattern2 <- ggplot(activity.fill,aes(x=interval,y=steps, color=dayType)) + stat_summary(fun.y=mean,geom="line") + facet_wrap(~dayType, nrow=2)
print(pattern2)
pattern2 <- ggplot(activity.fill,aes(x=interval,y=steps, color=dayType)) + stat_summary(fun.y=mean,geom="line") + facet_wrap(~dayType, nrow=2) + labs(x="Time Interval",y="Mean Steps",title="Mean Steps Taken as a Function of Time of Day")
print(pattern2)
